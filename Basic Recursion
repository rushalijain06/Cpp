1) 
Print numbers from 1 to N without the help of loops.
Input:
N = 10
Output: 1 2 3 4 5 6 7 8 9 10

Solution:
class Solution{
    public:
    //Complete this function
    int c=1;
    void printNos(int N)
    {
        //Your code here
        
        if(c > N) return;
        cout << c <<" ";
        c += 1;
        printNos(N);
    }
};


2)
Print GFG n times without the loop.
Input:
5
Output:
GFG GFG GFG GFG GFG

Solution:
class Solution {
  public:
  int c = 1;
    void printGfg(int N) {
        // Code here
        if(c > N) return;
        cout << "GFG" << " ";
        c += 1;
        printGfg(N);
    }
};


3)
Print numbers from N to 1 (space separated) without the help of loops.
Input:
N = 10
Output: 10 9 8 7 6 5 4 3 2 1

Solution:
class Solution {
  public:
  
    void printNos(int N) {
        // code here
        if(N == 0) return;
        cout << N << " ";
        printNos(N-1);
    }
};


4)
Given and integer N.Calculate the sum of series 13 + 23 + 33 + 43 + â€¦ till N-th term.
Input:
N=5
Output:
225
Explanation:
13+23+33+43+53=225

Solution:
class Solution {
  public:
    long long sumOfSeries(long long N) {
        // code here
        
        if(N == 0) return 0;
        return (N*N*N) + sumOfSeries(N-1);
    }
};


5)
A number N is called a factorial number if it is the factorial of a positive integer. For example, the first few factorial numbers are 1, 2, 6, 24, 120,
Given a number N, the task is to return the list/vector of the factorial numbers smaller than or equal to N.
Example 1:
Input: N = 3
Output: 1 2
Explanation: The first factorial number is 
1 which is less than equal to N. The second 
number is 2 which is less than equal to N,
but the third factorial number is 6 which 
is greater than N. So we print only 1 and 2.

Solution:
class Solution
{
public:
    vector<long long> factorialNumbers(long long N)
    {
        // Write Your Code here
        vector <long long> v;
        long long fact = 1, i = 2;
        while(fact <= N){
            v.push_back(fact);
            fact = fact * i;
            i++;
        }
        return v;
    }
};


6)
Given a string S, check if it is palindrome or not.
Example 1:
Input: S = "abba"
Output: 1
Explanation: S is a palindrome

Solution:
//User function template for C++
class Solution{
public:	
	
	int i = 0;
	int isPalindrome(string S)
	{
	    // Your code goes here
	    
	    if(i >= S.size()/2) return 1;
	    if(S[i] != S[S.size()-i-1]) return 0;
	    i = i+1;
	    return isPalindrome(S);
	}

};
